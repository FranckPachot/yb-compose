services:
 yb:
  image: yugabytedb/yugabyte
  command: |
   bash -xc '
    other_flags="--tserver_flags=${TSERVER_FLAGS} --master_flags=${MASTER_FLAGS}"
    # start in 3 zones -------------------------------------------------v
    cloud_location="cloud.region.zone$(( $(hostname -i | cut -d. -f4) % 3 ))"
    # add --join only if it is the fist start and not the first node
    if host ${COMPOSE_PROJECT_NAME}-yb-1 | grep " $(hostname -i)" || [ -f /root/var/conf/yugabyted.conf ]
    then # first node -----------------^
     yugabyted start --background=false --cloud_location=$$cloud_location --tserver_flags="${TSERVER_FLAGS}" $$other_flags
    else # other nodes
     # must be sure that node 1 to join is up
     until postgres/bin/pg_isready -h ${COMPOSE_PROJECT_NAME}-yb-1 ; do sleep 1 ; done | uniq
     if host ${COMPOSE_PROJECT_NAME}-yb-3 | grep " $(hostname -i)"
     then
      # node 3 must be sure that node 2 is up (because it will change the RF)
      until postgres/bin/pg_isready -h ${COMPOSE_PROJECT_NAME}-yb-2 ; do sleep 1 ; done | uniq
     fi
     yugabyted start --background=false --join=${COMPOSE_PROJECT_NAME}-yb-1 --cloud_location=$$cloud_location $$other_flags
    fi
   '
  deploy:
   replicas: 3
   restart_policy: 
    condition: on-failure
  healthcheck:
      interval: 5s
      timeout:  5s
      retries:  12
      start_period: 60s
      test: postgres/bin/pg_isready -h $$(hostname)
  expose:
   - "7000:7000"
   - "9000:9000"
   - "5433:5433"
   - "9042:9042"
   - "15433:15433"
  ports:
   - "5433-5463:5433"
   - "9042-9072:9042"
 rf3isready:
  image: yugabytedb/yugabyte
  command: postgres/bin/pg_isready -h ${COMPOSE_PROJECT_NAME}-yb-3
  depends_on:
   yb:
    condition: service_healthy
 ui-7000:
  image: caddy:2-alpine
  command: caddy reverse-proxy --from :7000 --to yb:7000
  ports:
   - 7000:7000
 ui-15433:
  image: caddy:2-alpine
  command: caddy reverse-proxy --from :15433 --to yb:15433
  ports:
   - 15433:15433
 tpcc:
  image: yugabytedb/ybbench:latest
  command: |
   bash -xc '
   cd /home/centos/code/tpcc &&
   [ -f .created ] || ./tpccbenchmark --create=true  --nodes=yb $TPCC_FLAGS | sed -e "s/^/create:  /" && touch .created
   [ -f .loaded  ] || ./tpccbenchmark --load=true    --nodes=yb $TPCC_FLAGS | sed -e "s/^/load:    /" && touch .loaded
   ./tpccbenchmark --execute=true --nodes=yb $TPCC_FLAGS  --dir=/tmp/tpcc-output | sed -e "s/^/execute: /" 
   '
  volumes: 
   - ./tpcc-output:/tmp/tpcc-output
  depends_on:
   yb:
    condition: service_healthy
